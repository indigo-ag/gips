make_image:
  stage: build
  script:
    # TODO don't do system maintenance in the CI pipeline; do it properly with devops
    #- apt-get update && apt-get -y install wget git
    # needed for atmo correction tests (none in -m lite atm)
    #- wget -O sixs ftp://$AGSFTPUSERNAME:$AGSFTPPASSWORD@agsftp.ags.io/gipsftp/sixs

    # need ortho for coreg but no coreg tests in the CI pipeline
    #- wget -O ortho ftp://$AGSFTPUSERNAME:$AGSFTPPASSWORD@agsftp.ags.io/gipsftp/ortho

    # only needed for fetch tests
    #- wget -O gitlab_ci ftp://$AGSFTPUSERNAME:$AGSFTPPASSWORD@agsftp.ags.io/gipsftp/gitlab_ci
    #- wget -O gips_creds.sh.enc
    #   ftp://$AGSFTPUSERNAME:$AGSFTPPASSWORD@agsftp.ags.io/gipsftp/gips_creds.sh.enc

    - docker build --no-cache -t gips-base -f Dockerfile .
    - docker build --no-cache -t gips_test_$CI_COMMIT_REF_SLUG -f docker/gips-ci.docker .
  tags:
    - gipsdev
  after_script:
   - docker system prune -f


run_tests:
  stage: test
  script:
    - docker run --rm gips_test_$CI_COMMIT_REF_SLUG pytest -vv -s -k 'unit or int'
    - docker run --rm
      -v /net/cluster/projects/gips-dev/sys-test-assets/:/artifact-store
      gips_test_$CI_COMMIT_REF_SLUG pytest -r es -vv --slow --setup-repo --sys -s -m lite
  tags:
    - gipsdev
  after_script:
    - docker image rm gips_test_$CI_COMMIT_REF_SLUG
    - docker system prune -f


#publish_image:
#  stage: deploy
#  only:
#    - tags
#  script:
#    - apt-get update && apt-get -y install wget git
#    - wget -O sixs ftp://$AGSFTPUSERNAME:$AGSFTPPASSWORD@agsftp.ags.io/gipsftp/sixs
#    - wget -O ortho ftp://$AGSFTPUSERNAME:$AGSFTPPASSWORD@agsftp.ags.io/gipsftp/ortho
#    - git checkout $CI_COMMIT_SHA
#    - VERSION=$(PYTHONPATH=. python -c 'import gips ; print(gips.__version__)')
#    - test -z "$(docker image ls --quiet registry.ags.io/gips:$VERSION)" -a "v$VERSION" = "$CI_COMMIT_REF_NAME"
#    - docker build -t gippy-03x-release -f docker/gippy-release.docker docker
#    # TODO GIPS_VERSION isn't actually used?
#    - docker build --no-cache
#      --build-arg GIPS_VERSION=$VERSION
#      -t registry.ags.io/gips:$VERSION
#      -f docker/gips-production.docker .
#    - docker push registry.ags.io/gips:$VERSION
#    - docker rmi registry.ags.io/gips:$VERSION
#  tags:
#    - gipsdev
#  after_script:
#   - docker system prune -f
